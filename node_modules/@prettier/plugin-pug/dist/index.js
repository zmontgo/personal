"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultOptions = exports.options = exports.printers = exports.parsers = exports.languages = exports.plugin = void 0;
const lex = require("pug-lexer");
const logger_1 = require("./logger");
const options_1 = require("./options");
const converge_1 = require("./options/converge");
const printer_1 = require("./printer");
const logger = logger_1.createLogger(console);
if (process.env.NODE_ENV === 'test') {
    logger.setLogLevel(logger_1.LogLevel.DEBUG);
}
exports.plugin = {
    languages: [
        {
            name: 'Pug',
            parsers: ['pug'],
            tmScope: 'text.jade',
            aceMode: 'jade',
            codemirrorMode: 'pug',
            codemirrorMimeType: 'text/x-pug',
            extensions: ['.jade', '.pug'],
            linguistLanguageId: 179,
            vscodeLanguageIds: ['jade', 'pug']
        }
    ],
    parsers: {
        pug: {
            parse(text, parsers, options) {
                logger.debug('[parsers:pug:parse]:', { text });
                let trimmedAndAlignedContent = text.replace(/^\s*\n/, '');
                const contentIndentation = /^\s*/.exec(trimmedAndAlignedContent);
                if (contentIndentation === null || contentIndentation === void 0 ? void 0 : contentIndentation[0]) {
                    const contentIndentationRegex = new RegExp(`(^|\\n)${contentIndentation[0]}`, 'g');
                    trimmedAndAlignedContent = trimmedAndAlignedContent.replace(contentIndentationRegex, '$1');
                }
                const content = trimmedAndAlignedContent;
                const tokens = lex(content);
                return { content, tokens };
            },
            astFormat: 'pug-ast',
            hasPragma(text) {
                return text.startsWith('//- @prettier\n') || text.startsWith('//- @format\n');
            },
            locStart(node) {
                logger.debug('[parsers:pug:locStart]:', { node });
                return 0;
            },
            locEnd(node) {
                logger.debug('[parsers:pug:locEnd]:', { node });
                return 0;
            },
            preprocess(text, options) {
                logger.debug('[parsers:pug:preprocess]:', { text });
                return text;
            }
        }
    },
    printers: {
        'pug-ast': {
            print(path, options, print) {
                const entry = path.stack[0];
                const { content, tokens } = entry;
                const pugOptions = converge_1.convergeOptions(options);
                const printer = new printer_1.PugPrinter(content, tokens, pugOptions);
                const result = printer.build();
                logger.debug('[printers:pug-ast:print]:', result);
                return result;
            },
            embed(path, print, textToDoc, options) {
                return null;
            },
            insertPragma(text) {
                return `//- @prettier\n${text}`;
            }
        }
    },
    options: options_1.options,
    defaultOptions: {}
};
exports.languages = exports.plugin.languages;
exports.parsers = exports.plugin.parsers;
exports.printers = exports.plugin.printers;
exports.options = exports.plugin.options;
exports.defaultOptions = exports.plugin.defaultOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBYUEsaUNBQWlDO0FBQ2pDLHFDQUEwRDtBQUUxRCx1Q0FBa0Q7QUFDbEQsaURBQXFEO0FBRXJELHVDQUF1QztBQUV2QyxNQUFNLE1BQU0sR0FBVyxxQkFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzdDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssTUFBTSxFQUFFO0lBQ3BDLE1BQU0sQ0FBQyxXQUFXLENBQUMsaUJBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNuQztBQVNZLFFBQUEsTUFBTSxHQUFXO0lBQzdCLFNBQVMsRUFBRTtRQUNWO1lBQ0MsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDaEIsT0FBTyxFQUFFLFdBQVc7WUFDcEIsT0FBTyxFQUFFLE1BQU07WUFDZixjQUFjLEVBQUUsS0FBSztZQUNyQixrQkFBa0IsRUFBRSxZQUFZO1lBQ2hDLFVBQVUsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7WUFDN0Isa0JBQWtCLEVBQUUsR0FBRztZQUN2QixpQkFBaUIsRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7U0FDbEM7S0FDRDtJQUVELE9BQU8sRUFBRTtRQUNSLEdBQUcsRUFBRTtZQUNKLEtBQUssQ0FBQyxJQUFZLEVBQUUsT0FBeUMsRUFBRSxPQUFzQjtnQkFDcEYsTUFBTSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBRS9DLElBQUksd0JBQXdCLEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ2xFLE1BQU0sa0JBQWtCLEdBQTJCLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztnQkFDekYsSUFBSSxrQkFB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